#!/usr/bin/env stap

%{
#include <linux/types.h>
#include <scsi/scsi_cmnd.h>
#include <scsi/scsi_device.h>
#include <linux/timer.h>
#include <linux/blkdev.h>
#include <linux/bio.h>
#include <linux/mm_types.h>
#include <linux/mm.h>
#include <linux/fs.h>
%}

global dev_major
global dev_minor

probe begin
{
	dev_major = $1
	dev_minor = $2

	printf("\nStart SCSI IO error fault emulation for %d:%d\n", dev_major, dev_minor)
}

function scmd_get_dir:long (scmd:long)
%{
	THIS->__retvalue = ((struct scsi_cmnd *)(long) THIS->l_scmd)->sc_data_direction;
%}

function scmd_get_lba:long (scmd:long)
%{
	THIS->__retvalue = scsi_get_lba(((struct scsi_cmnd *)(long) THIS->l_scmd));
%}

function scmd_get_transfer_len:long (scmd:long)
%{
	THIS->__retvalue = scsi_transfer_length(((struct scsi_cmnd *)(long) THIS->l_scmd));
%}

function set_sense_buf:long (cmd:long, result:long, sensekey:long, asc:long, ascq:long)
%{
	struct scsi_cmnd *scmd = (struct scsi_cmnd *)(long) THIS->l_cmd;

	scmd->result = (int)(long) THIS->l_result;
	scmd->sense_buffer[0] = 0x70; /* current, fixed format */
	scmd->sense_buffer[2] = (unsigned char)(long) THIS->l_sensekey;
	scmd->sense_buffer[7] = 0x13; /* length */
	scmd->sense_buffer[12] = (unsigned char)(long) THIS->l_asc;
	scmd->sense_buffer[13] = (unsigned char)(long) THIS->l_ascq;
%}

probe kernel.function("scsi_decide_disposition")
{
	if ($scmd->request->rq_disk != 0) {
		major = $scmd->request->rq_disk->major
		minor = $scmd->request->rq_disk->first_minor
	}

	if (major == dev_major && minor == dev_minor) {
		printf("SCSI Decide Disposition: lba=%ld len=%ld dir=%ld\n\n",
			scmd_get_lba($scmd), scmd_get_transfer_len($scmd), scmd_get_dir($scmd))

		set_sense_buf($scmd, 0x02, 0x03, 0x11, 0x04)
	}
}

probe end
{
	printf("\nEmulation done\n");
}
