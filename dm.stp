#!/usr/bin/env stap

function trace(entry_p, extra) {
	%( $# > 1 %? if (tid() in trace) %)
		printf("%s%s%s %s\n",
		thread_indent(entry_p),
		(entry_p > 0 ? "->":"<-"),
		probefunc(), extra)
}

%( $# > 1 %?
global trace
probe $2.call {
	trace[tid()] = 1
}
probe $2.return {
	delete trace[tid()]
}
%)

probe begin
{
	printf("Hello world\n")
}

/* probe kernel.function("kobject_uevent_env") */
/* probe kernel.function("*@net/socket.c") {} */
/* probe kernel.function("*@drivers/dm/md.c")  { trace(4, $$parms) } */
probe module("dm_mod").function("dm_kobject_uevent").call
{
	trace(1, $$parms)
}

probe module("dm_mod").function("dm_kobject_uevent").return
{
	trace(-1, $$return)
}


probe kernel.function("sysfs_write_file").call
{
	trace(1, $$parms)
}

probe kernel.function("sysfs_write_file").return
{
	trace(-1, $$return)
}


probe kernel.function("dev_attr_store").call
{
	trace(1, $$parms)
}

probe kernel.function("dev_attr_store").return
{
	trace(-1, $$return)
}


probe kernel.function("store_uevent").call
{
	trace(1, $$parms)
}

probe kernel.function("store_uevent").return
{
	trace(-1, $$return)
}


probe kernel.function("kobject_uevent").call
{
	trace(1, $$parms)
}

probe kernel.function("kobject_uevent").return
{
	trace(-1, $$return)
}


probe kernel.function("kobject_uevent_env").call
{
	trace(1, $$parms)
}

probe kernel.function("kobject_uevent_env").return
{
	trace(-1, $$return)
}


probe end
{
	printf("Bye world\n")
}
